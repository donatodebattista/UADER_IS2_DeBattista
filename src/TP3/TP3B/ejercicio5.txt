Supongamos que estemos desarrollando una aplicacion colaborativa para el desarrollo de diagramas UML en la que los usuarios pueden agragar componentes personalizados al diagrama. Cada componente puede contar con un gran numero de propiedades. Al realizar un diagrama muy extenso con cientos de elementos, la aplicacion comienza a consumir mucha memoria, disminuye su rendimiento y se vuelve muy lenta. 
En este caso, podriamos aplicar el patrón Flyweight para optimizar el uso de memoria y mejorar el rendimiento de la aplicación. En lugar de crear una instancia para cada componente cada vez que se lo necesita, se podría crear una única instancia compartida. Cada una de estas tendría una lista de propiedades únicas y otra lista de propiedades compartidas que pueden ser usadas por otros objetos. De esta manera, se puede reducir la cantidad de componentes que se crean y almacenar solo las propiedades necesarias para cada uno de ellos, lo que lleva a una aplicación más eficiente en términos de memoria y rendimiento.